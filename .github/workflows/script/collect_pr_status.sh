#!/bin/bash

# ==========================================
# collect_pr_status.sh
# ------------------------------------------
# „Ç™„Éº„Éó„É≥‰∏≠„ÅÆ„Éó„É´„É™„ÇØ„Ç®„Çπ„Éà„ÇíÂèñÂæó„Åó
# GitHub Wiki „ÅÆ Markdown „Éö„Éº„Ç∏„Å´„Çπ„ÉÜ„Éº„Çø„Çπ„Çí
# „Åæ„Å®„ÇÅ„Çã„Çπ„ÇØ„É™„Éó„Éà„Åß„Åô„ÄÇGitHub Actions ‰∏ä„Åß
# gh „Ç≥„Éû„É≥„Éâ„Çí‰Ωø„Å£„Å¶ÂÆüË°å„Åô„ÇãÊÉ≥ÂÆö„Åß„Åô„ÄÇ
# ==========================================

set -euo pipefail

# ÂøÖË¶Å„Å™„Ç≥„Éû„É≥„Éâ„ÅÆÂ≠òÂú®Á¢∫Ë™ç
command -v gh >/dev/null 2>&1 || { echo "gh „Ç≥„Éû„É≥„Éâ„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì"; exit 1; }
command -v jq >/dev/null 2>&1 || { echo "jq „Ç≥„Éû„É≥„Éâ„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì"; exit 1; }

# ----- Èñ¢Êï∞ÂÆöÁæ© --------------------------------------------------------------

# „É¨„Éì„É•„ÉºÁµêÊûú„Å®„Éâ„É©„Éï„ÉàÁä∂ÊÖã„Åã„Çâ PR „ÅÆ„Çπ„ÉÜ„Éº„Çø„Çπ„ÇíÂà§ÂÆö„Åô„Çã
# ÂºïÊï∞:
#   $1 - „É¨„Éì„É•„ÉºÊÉÖÂ†±(JSON ÈÖçÂàó)
#   $2 - „Éâ„É©„Éï„Éà„Åã„Å©„ÅÜ„Åã(true/false)
determine_pr_status() {
    local reviews="$1"
    local is_draft="$2"

    if [[ "$is_draft" == "true" ]]; then
        echo "„Éâ„É©„Éï„Éà"
        return
    fi

    local approved_count=$(echo "$reviews" | jq '[.[] | select(.state=="APPROVED")] | length')
    local changes_requested=$(echo "$reviews" | jq '[.[] | select(.state=="CHANGES_REQUESTED")] | length')
    local review_count=$(echo "$reviews" | jq 'length')

    if [[ $approved_count -gt 0 ]]; then
        echo "ÊâøË™çÊ∏à„Åø"
    elif [[ $changes_requested -gt 0 ]]; then
        echo "‰øÆÊ≠£‰æùÈ†º"
    elif [[ $review_count -gt 0 ]]; then
        echo "„É¨„Éì„É•„Éº‰∏≠"
    else
        echo "Êú™„É¨„Éì„É•„Éº"
    fi
}

# „É¨„Éì„É•„ÉØ„Éº„ÅÆÁä∂ÊÖã„ÇíÁµµÊñáÂ≠ó‰ªò„Åç„ÅßÊï¥ÂΩ¢„Åô„Çã
# ÂºïÊï∞:
#   $1 - „É¨„Éì„É•„ÉØ„Éº„ÅÆ„É≠„Ç∞„Ç§„É≥Âêç
#   $2 - „É¨„Éì„É•„Éº„ÅÆÁä∂ÊÖã(APPROVED „Å™„Å©)
format_reviewer_status() {
    local reviewer="$1"
    local state="$2"
    case "$state" in
        "APPROVED") echo "${reviewer}‚úÖ" ;;
        "CHANGES_REQUESTED") echo "${reviewer}‚ùå" ;;
        "COMMENTED") echo "${reviewer}üí¨" ;;
        "PENDING"|"") echo "${reviewer}‚è≥" ;;
        *) echo "${reviewer}" ;;
    esac
}

# -----------------------------------------------------------------------------
# Âá∫ÂäõÂÖà„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅÆË®≠ÂÆö
# ÂºïÊï∞„Åß„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅåÊåáÂÆö„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑÂ†¥Âêà„ÅØ„Ç´„É¨„É≥„Éà„Éá„Ç£„É¨„ÇØ„Éà„É™„Çí‰ΩøÁî®
# -----------------------------------------------------------------------------
OUTPUT_DIR="${1:-.}"
mkdir -p "$OUTPUT_DIR"
OUTPUT_FILE="$OUTPUT_DIR/PR_Status.md"

# Markdown „ÉÜ„Éº„Éñ„É´„ÅÆ„Éò„ÉÉ„ÉÄ„Éº„ÇíÊõ∏„ÅçÂá∫„Åó
{
    echo "# Pull Request Status"
    echo ""
    echo "Updated: $(date '+%Y-%m-%d %H:%M:%S')"
    echo ""
    echo "| PR | Title | Áä∂ÊÖã | Reviewers | Assignees | Priority | Target Date | Sprint |"
    echo "| --- | ----- | ---- | --------- | --------- | -------- | ----------- | ------ |"
} > "$OUTPUT_FILE"

# -----------------------------------------------------------------------------
# PR ÊÉÖÂ†±„ÅÆÂèéÈõÜ
# -----------------------------------------------------------------------------
PR_LIST=$(gh pr list --state open --limit 100 \
    --json number,title,author,createdAt,updatedAt,url,isDraft)
PR_COUNT=$(echo "$PR_LIST" | jq 'length')

for i in $(seq 0 $((PR_COUNT - 1))); do
    PR_NUMBER=$(echo "$PR_LIST" | jq -r ".[$i].number")
    PR_TITLE=$(echo "$PR_LIST" | jq -r ".[$i].title" | tr '\n' ' ' | sed 's/|/\\|/g')
    PR_URL=$(echo "$PR_LIST" | jq -r ".[$i].url")
    PR_IS_DRAFT=$(echo "$PR_LIST" | jq -r ".[$i].isDraft")

    DETAILS=$(gh pr view "$PR_NUMBER" --json reviews,reviewRequests,assignees)
    REVIEWS=$(echo "$DETAILS" | jq -c '.reviews')
    REQUESTED_REVIEWERS=$(echo "$DETAILS" | jq -r '.reviewRequests[].login' | tr '\n' ' ')
    ASSIGNEES=$(echo "$DETAILS" | jq -r '.assignees[].login' | tr '\n' ' ')
    [[ -z "$ASSIGNEES" ]] && ASSIGNEES="Êú™Ââ≤ÂΩì"

    # „É¨„Éì„É•„ÉØ„ÉºÊÉÖÂ†±„ÇíÊï¥ÂΩ¢
    REVIEWER_INFO=""
    for reviewer in $REQUESTED_REVIEWERS; do
        [[ -n "$REVIEWER_INFO" ]] && REVIEWER_INFO+="<br>"
        REVIEWER_INFO+=$(format_reviewer_status "$reviewer" "PENDING")
    done
    if [[ "$REVIEWS" != "[]" ]]; then
        UNIQUE_REVIEWERS=$(echo "$REVIEWS" | jq -r '.[].user.login' | sort -u)
        for reviewer in $UNIQUE_REVIEWERS; do
            LATEST_STATE=$(echo "$REVIEWS" | jq -r ".[] | select(.user.login==\"$reviewer\") | .state" | tail -n1)
            [[ -n "$REVIEWER_INFO" ]] && REVIEWER_INFO+="<br>"
            REVIEWER_INFO+=$(format_reviewer_status "$reviewer" "$LATEST_STATE")
        done
    fi
    [[ -z "$REVIEWER_INFO" ]] && REVIEWER_INFO="Êú™Ââ≤ÂΩì"

    PR_STATUS=$(determine_pr_status "$REVIEWS" "$PR_IS_DRAFT")

    # --- Projects „Éï„Ç£„Éº„É´„Éâ„ÅÆÂèñÂæó -------------------------------------------
    PR_NODE_ID=$(gh pr view "$PR_NUMBER" --json id -q .id)
    GRAPHQL_QUERY="$(cat <<'GQL'
        query($PR_NODE_ID: ID!) {
          node(id: $PR_NODE_ID) {
            ... on PullRequest {
              projectNextItems(first: 20) {
                nodes {
                  fieldValues(first: 20) {
                    nodes {
                      projectField { name }
                      ... on ProjectNextTextFieldValue { text }
                      ... on ProjectNextDateFieldValue { date }
                      ... on ProjectNextSingleSelectFieldValue { name }
                    }
                  }
                }
              }
            }
          }
        }
GQL
    )"
    PROJECT_JSON=$(gh api graphql -H "GraphQL-Features: projects_next_graphql" \
        -f query="$GRAPHQL_QUERY" -f PR_NODE_ID="$PR_NODE_ID")

    TARGET_DATE=$(echo "$PROJECT_JSON" | jq -r \
        '.data.node.projectNextItems.nodes[].fieldValues.nodes[] | select(.projectField.name=="Target Date") | (.date // .text) ' | head -n1)
    PRIORITY=$(echo "$PROJECT_JSON" | jq -r \
        '.data.node.projectNextItems.nodes[].fieldValues.nodes[] | select(.projectField.name=="Priority") | (.name // .text) ' | head -n1)
    SPRINT=$(echo "$PROJECT_JSON" | jq -r \
        '.data.node.projectNextItems.nodes[].fieldValues.nodes[] | select(.projectField.name=="Sprint") | (.name // .text) ' | head -n1)

    TARGET_DATE=${TARGET_DATE:-"-"}
    PRIORITY=${PRIORITY:-"-"}
    SPRINT=${SPRINT:-"-"}

    echo "| #$PR_NUMBER | [$PR_TITLE]($PR_URL) | $PR_STATUS | $REVIEWER_INFO | $ASSIGNEES | $PRIORITY | $TARGET_DATE | $SPRINT |" >> "$OUTPUT_FILE"
done

echo "PR ÊÉÖÂ†±„Çí $OUTPUT_FILE „Å´Âá∫Âäõ„Åó„Åæ„Åó„Åü"
